#ifdef CHASTE_CVODE
//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: beeler_reuter_model_1977
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Tue Feb 18 17:07:46 2020
//! 
//! <autogenerated>

#include "beeler_reuter_model_1977.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicbeeler_reuter_model_1977FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__stimulus_protocol__IstimStart = 10.0; // millisecond
        const double var_stimulus_protocol__IstimAmplitude = 0.5; // uA_per_mm2
        const double var_chaste_interface__stimulus_protocol__IstimPeriod = 1000.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimPulseDuration = 1.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimAmplitude_converter = var_stimulus_protocol__IstimAmplitude; // uA_per_mm2
        const double var_chaste_interface__stimulus_protocol__IstimAmplitude = 100.0 * var_chaste_interface__stimulus_protocol__IstimAmplitude_converter; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__stimulus_protocol__IstimAmplitude),
                var_chaste_interface__stimulus_protocol__IstimPulseDuration,
                var_chaste_interface__stimulus_protocol__IstimPeriod,
                var_chaste_interface__stimulus_protocol__IstimStart
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicbeeler_reuter_model_1977FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Dynamicbeeler_reuter_model_1977FromCellMLCvode::Dynamicbeeler_reuter_model_1977FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                8,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicbeeler_reuter_model_1977FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
    }
    
    Dynamicbeeler_reuter_model_1977FromCellMLCvode::~Dynamicbeeler_reuter_model_1977FromCellMLCvode()
    {
    }
    
    double Dynamicbeeler_reuter_model_1977FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -84.624
        double var_chaste_interface__slow_inward_current__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 1e-4
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.011
        double var_chaste_interface__sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988
        double var_chaste_interface__sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.975
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.003
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.994
        double var_chaste_interface__time_dependent_outward_current_x1_gate__x1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0001
        
        const double var_sodium_current__E_Na = 50.0; // mV
        const double var_sodium_current__m = var_chaste_interface__sodium_current_m_gate__m; // dimensionless
        const double var_sodium_current__j = var_chaste_interface__sodium_current_j_gate__j; // dimensionless
        const double var_sodium_current__h = var_chaste_interface__sodium_current_h_gate__h; // dimensionless
        const double var_sodium_current__g_Nac = 3.0000000000000001e-05; // mS_per_mm2
        const double var_sodium_current__V = var_chaste_interface__membrane__V; // mV
        const double var_sodium_current__g_Na = 0.040000000000000001; // mS_per_mm2
        const double var_sodium_current__i_Na = ((var_sodium_current__g_Na * pow(var_sodium_current__m, 3.0) * var_sodium_current__h * var_sodium_current__j) + var_sodium_current__g_Nac) * (var_sodium_current__V - var_sodium_current__E_Na); // uA_per_mm2
        const double var_slow_inward_current__d = var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_slow_inward_current__g_s = 0.00089999999999999998; // mS_per_mm2
        const double var_slow_inward_current__f = var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_slow_inward_current__V = var_chaste_interface__membrane__V; // mV
        const double var_slow_inward_current__Cai = var_chaste_interface__slow_inward_current__Cai; // concentration_units
        const double var_slow_inward_current__E_s = (-82.299999999999997) - (13.028700000000001 * log(var_slow_inward_current__Cai * 0.001)); // mV
        const double var_slow_inward_current__i_s = var_slow_inward_current__g_s * var_slow_inward_current__d * var_slow_inward_current__f * (var_slow_inward_current__V - var_slow_inward_current__E_s); // uA_per_mm2
        const double var_time_dependent_outward_current__x1 = var_chaste_interface__time_dependent_outward_current_x1_gate__x1; // dimensionless
        const double var_time_dependent_outward_current__V = var_chaste_interface__membrane__V; // mV
        const double var_time_dependent_outward_current__i_x1 = (var_time_dependent_outward_current__x1 * 0.0080000000000000002 * (exp(0.040000000000000001 * (var_time_dependent_outward_current__V + 77.0)) - 1.0)) / exp(0.040000000000000001 * (var_time_dependent_outward_current__V + 35.0)); // uA_per_mm2
        const double var_time_independent_outward_current__V = var_chaste_interface__membrane__V; // mV
        const double var_time_independent_outward_current__i_K1 = 0.0035000000000000001 * (((4.0 * (exp(0.040000000000000001 * (var_time_independent_outward_current__V + 85.0)) - 1.0)) / (exp(0.080000000000000002 * (var_time_independent_outward_current__V + 53.0)) + exp(0.040000000000000001 * (var_time_independent_outward_current__V + 53.0)))) + ((0.20000000000000001 * (var_time_independent_outward_current__V + 23.0)) / (1.0 - exp((-0.040000000000000001) * (var_time_independent_outward_current__V + 23.0))))); // uA_per_mm2
        const double var_chaste_interface__time_dependent_outward_current__i_x1 = var_time_dependent_outward_current__i_x1; // uA_per_mm2
        const double var_chaste_interface__sodium_current__i_Na = var_sodium_current__i_Na; // uA_per_mm2
        const double var_chaste_interface__slow_inward_current__i_s = var_slow_inward_current__i_s; // uA_per_mm2
        const double var_chaste_interface__time_independent_outward_current__i_K1 = var_time_independent_outward_current__i_K1; // uA_per_mm2
        const double var_chaste_interface__i_ionic = (100.0 * var_chaste_interface__sodium_current__i_Na) + (100.0 * var_chaste_interface__slow_inward_current__i_s) + (100.0 * var_chaste_interface__time_dependent_outward_current__i_x1) + (100.0 * var_chaste_interface__time_independent_outward_current__i_K1); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicbeeler_reuter_model_1977FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -84.624
        double var_chaste_interface__slow_inward_current__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 1e-4
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.011
        double var_chaste_interface__sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988
        double var_chaste_interface__sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.975
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.003
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.994
        double var_chaste_interface__time_dependent_outward_current_x1_gate__x1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0001
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_sodium_current__m = var_chaste_interface__sodium_current_m_gate__m; // dimensionless
        const double var_sodium_current__j = var_chaste_interface__sodium_current_j_gate__j; // dimensionless
        const double var_sodium_current__h = var_chaste_interface__sodium_current_h_gate__h; // dimensionless
        const double var_sodium_current__V = var_chaste_interface__membrane__V; // mV
        const double var_slow_inward_current__d = var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_slow_inward_current__g_s = 0.00089999999999999998; // mS_per_mm2
        const double var_slow_inward_current__f = var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_slow_inward_current__V = var_chaste_interface__membrane__V; // mV
        const double var_slow_inward_current__Cai = var_chaste_interface__slow_inward_current__Cai; // concentration_units
        const double var_slow_inward_current__E_s = (-82.299999999999997) - (13.028700000000001 * log(var_slow_inward_current__Cai * 0.001)); // mV
        const double var_slow_inward_current__i_s = var_slow_inward_current__g_s * var_slow_inward_current__d * var_slow_inward_current__f * (var_slow_inward_current__V - var_slow_inward_current__E_s); // uA_per_mm2
        const double var_time_dependent_outward_current__x1 = var_chaste_interface__time_dependent_outward_current_x1_gate__x1; // dimensionless
        const double var_time_dependent_outward_current__V = var_chaste_interface__membrane__V; // mV
        const double var_sodium_current_m_gate__V = var_sodium_current__V; // mV
        const double var_sodium_current_m_gate__alpha_m = ((-1.0) * (var_sodium_current_m_gate__V + 47.0)) / (exp((-0.10000000000000001) * (var_sodium_current_m_gate__V + 47.0)) - 1.0); // per_ms
        const double var_sodium_current_m_gate__m = var_sodium_current__m; // dimensionless
        const double var_sodium_current_m_gate__beta_m = 40.0 * exp((-0.056000000000000001) * (var_sodium_current_m_gate__V + 72.0)); // per_ms
        const double var_sodium_current_m_gate__d_m_d_environment__time = (var_sodium_current_m_gate__alpha_m * (1.0 - var_sodium_current_m_gate__m)) - (var_sodium_current_m_gate__beta_m * var_sodium_current_m_gate__m); // 'per millisecond'
        const double var_sodium_current__sodium_current_m_gate__d_m_d_environment__time = var_sodium_current_m_gate__d_m_d_environment__time; // ___units_11
        const double var_sodium_current_h_gate__V = var_sodium_current__V; // mV
        const double var_sodium_current_h_gate__beta_h = 1.7 / (exp((-0.082000000000000003) * (var_sodium_current_h_gate__V + 22.5)) + 1.0); // per_ms
        const double var_sodium_current_h_gate__alpha_h = 0.126 * exp((-0.25) * (var_sodium_current_h_gate__V + 77.0)); // per_ms
        const double var_sodium_current_h_gate__h = var_sodium_current__h; // dimensionless
        const double var_sodium_current_h_gate__d_h_d_environment__time = (var_sodium_current_h_gate__alpha_h * (1.0 - var_sodium_current_h_gate__h)) - (var_sodium_current_h_gate__beta_h * var_sodium_current_h_gate__h); // 'per millisecond'
        const double var_sodium_current__sodium_current_h_gate__d_h_d_environment__time = var_sodium_current_h_gate__d_h_d_environment__time; // ___units_11
        const double var_sodium_current_j_gate__V = var_sodium_current__V; // mV
        const double var_sodium_current_j_gate__beta_j = 0.29999999999999999 / (exp((-0.10000000000000001) * (var_sodium_current_j_gate__V + 32.0)) + 1.0); // per_ms
        const double var_sodium_current_j_gate__j = var_sodium_current__j; // dimensionless
        const double var_sodium_current_j_gate__alpha_j = (0.055 * exp((-0.25) * (var_sodium_current_j_gate__V + 78.0))) / (exp((-0.20000000000000001) * (var_sodium_current_j_gate__V + 78.0)) + 1.0); // per_ms
        const double var_sodium_current_j_gate__d_j_d_environment__time = (var_sodium_current_j_gate__alpha_j * (1.0 - var_sodium_current_j_gate__j)) - (var_sodium_current_j_gate__beta_j * var_sodium_current_j_gate__j); // 'per millisecond'
        const double var_sodium_current__sodium_current_j_gate__d_j_d_environment__time = var_sodium_current_j_gate__d_j_d_environment__time; // ___units_11
        const double var_slow_inward_current__d_Cai_d_environment__time = (((-0.01) * var_slow_inward_current__i_s) / 1.0) + (0.070000000000000007 * (0.0001 - var_slow_inward_current__Cai)); // 'nanomole per millimetre^3 per millisecond'
        const double var_slow_inward_current_d_gate__V = var_slow_inward_current__V; // mV
        const double var_slow_inward_current_d_gate__alpha_d = (0.095000000000000001 * exp((-(var_slow_inward_current_d_gate__V - 5.0)) / 100.0)) / (1.0 + exp((-(var_slow_inward_current_d_gate__V - 5.0)) / 13.890000000000001)); // per_ms
        const double var_slow_inward_current_d_gate__d = var_slow_inward_current__d; // dimensionless
        const double var_slow_inward_current_d_gate__beta_d = (0.070000000000000007 * exp((-(var_slow_inward_current_d_gate__V + 44.0)) / 59.0)) / (1.0 + exp((var_slow_inward_current_d_gate__V + 44.0) / 20.0)); // per_ms
        const double var_slow_inward_current_d_gate__d_d_d_environment__time = (var_slow_inward_current_d_gate__alpha_d * (1.0 - var_slow_inward_current_d_gate__d)) - (var_slow_inward_current_d_gate__beta_d * var_slow_inward_current_d_gate__d); // 'per millisecond'
        const double var_slow_inward_current__slow_inward_current_d_gate__d_d_d_environment__time = var_slow_inward_current_d_gate__d_d_d_environment__time; // ___units_11
        const double var_slow_inward_current_f_gate__f = var_slow_inward_current__f; // dimensionless
        const double var_slow_inward_current_f_gate__V = var_slow_inward_current__V; // mV
        const double var_slow_inward_current_f_gate__alpha_f = (0.012 * exp((-(var_slow_inward_current_f_gate__V + 28.0)) / 125.0)) / (1.0 + exp((var_slow_inward_current_f_gate__V + 28.0) / 6.6699999999999999)); // per_ms
        const double var_slow_inward_current_f_gate__beta_f = (0.0064999999999999997 * exp((-(var_slow_inward_current_f_gate__V + 30.0)) / 50.0)) / (1.0 + exp((-(var_slow_inward_current_f_gate__V + 30.0)) / 5.0)); // per_ms
        const double var_slow_inward_current_f_gate__d_f_d_environment__time = (var_slow_inward_current_f_gate__alpha_f * (1.0 - var_slow_inward_current_f_gate__f)) - (var_slow_inward_current_f_gate__beta_f * var_slow_inward_current_f_gate__f); // 'per millisecond'
        const double var_slow_inward_current__slow_inward_current_f_gate__d_f_d_environment__time = var_slow_inward_current_f_gate__d_f_d_environment__time; // ___units_11
        const double var_time_dependent_outward_current_x1_gate__x1 = var_time_dependent_outward_current__x1; // dimensionless
        const double var_time_dependent_outward_current_x1_gate__V = var_time_dependent_outward_current__V; // mV
        const double var_time_dependent_outward_current_x1_gate__alpha_x1 = (0.00050000000000000001 * exp((var_time_dependent_outward_current_x1_gate__V + 50.0) / 12.1)) / (1.0 + exp((var_time_dependent_outward_current_x1_gate__V + 50.0) / 17.5)); // per_ms
        const double var_time_dependent_outward_current_x1_gate__beta_x1 = (0.0012999999999999999 * exp((-(var_time_dependent_outward_current_x1_gate__V + 20.0)) / 16.670000000000002)) / (1.0 + exp((-(var_time_dependent_outward_current_x1_gate__V + 20.0)) / 25.0)); // per_ms
        const double var_time_dependent_outward_current_x1_gate__d_x1_d_environment__time = (var_time_dependent_outward_current_x1_gate__alpha_x1 * (1.0 - var_time_dependent_outward_current_x1_gate__x1)) - (var_time_dependent_outward_current_x1_gate__beta_x1 * var_time_dependent_outward_current_x1_gate__x1); // 'per millisecond'
        const double var_time_dependent_outward_current__time_dependent_outward_current_x1_gate__d_x1_d_environment__time = var_time_dependent_outward_current_x1_gate__d_x1_d_environment__time; // ___units_11
        const double var_chaste_interface__slow_inward_current__d_Cai_d_environment__time = var_slow_inward_current__d_Cai_d_environment__time; // ___units_21
        const double var_chaste_interface__sodium_current_m_gate__d_m_d_environment__time = var_sodium_current__sodium_current_m_gate__d_m_d_environment__time; // ___units_11
        const double var_chaste_interface__sodium_current_h_gate__d_h_d_environment__time = var_sodium_current__sodium_current_h_gate__d_h_d_environment__time; // ___units_11
        const double var_chaste_interface__sodium_current_j_gate__d_j_d_environment__time = var_sodium_current__sodium_current_j_gate__d_j_d_environment__time; // ___units_11
        const double var_chaste_interface__slow_inward_current_d_gate__d_d_d_environment__time = var_slow_inward_current__slow_inward_current_d_gate__d_d_d_environment__time; // ___units_11
        const double var_chaste_interface__slow_inward_current_f_gate__d_f_d_environment__time = var_slow_inward_current__slow_inward_current_f_gate__d_f_d_environment__time; // ___units_11
        const double var_chaste_interface__time_dependent_outward_current_x1_gate__d_x1_d_environment__time = var_time_dependent_outward_current__time_dependent_outward_current_x1_gate__d_x1_d_environment__time; // ___units_11
        const double d_dt_chaste_interface__slow_inward_current__Cai = var_chaste_interface__slow_inward_current__d_Cai_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__sodium_current_m_gate__m = var_chaste_interface__sodium_current_m_gate__d_m_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__sodium_current_h_gate__h = var_chaste_interface__sodium_current_h_gate__d_h_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__sodium_current_j_gate__j = var_chaste_interface__sodium_current_j_gate__d_j_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__slow_inward_current_d_gate__d = var_chaste_interface__slow_inward_current_d_gate__d_d_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__slow_inward_current_f_gate__f = var_chaste_interface__slow_inward_current_f_gate__d_f_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__time_dependent_outward_current_x1_gate__x1 = var_chaste_interface__time_dependent_outward_current_x1_gate__d_x1_d_environment__time; // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__C = 0.01; // uF_per_mm2
            const double var_sodium_current__E_Na = 50.0; // mV
            const double var_sodium_current__g_Nac = 3.0000000000000001e-05; // mS_per_mm2
            const double var_sodium_current__g_Na = 0.040000000000000001; // mS_per_mm2
            const double var_sodium_current__i_Na = ((var_sodium_current__g_Na * pow(var_sodium_current__m, 3.0) * var_sodium_current__h * var_sodium_current__j) + var_sodium_current__g_Nac) * (var_sodium_current__V - var_sodium_current__E_Na); // uA_per_mm2
            const double var_membrane__i_Na = var_sodium_current__i_Na; // uA_per_mm2
            const double var_membrane__i_s = var_slow_inward_current__i_s; // uA_per_mm2
            const double var_time_dependent_outward_current__i_x1 = (var_time_dependent_outward_current__x1 * 0.0080000000000000002 * (exp(0.040000000000000001 * (var_time_dependent_outward_current__V + 77.0)) - 1.0)) / exp(0.040000000000000001 * (var_time_dependent_outward_current__V + 35.0)); // uA_per_mm2
            const double var_membrane__i_x1 = var_time_dependent_outward_current__i_x1; // uA_per_mm2
            const double var_time_independent_outward_current__V = var_chaste_interface__membrane__V; // mV
            const double var_time_independent_outward_current__i_K1 = 0.0035000000000000001 * (((4.0 * (exp(0.040000000000000001 * (var_time_independent_outward_current__V + 85.0)) - 1.0)) / (exp(0.080000000000000002 * (var_time_independent_outward_current__V + 53.0)) + exp(0.040000000000000001 * (var_time_independent_outward_current__V + 53.0)))) + ((0.20000000000000001 * (var_time_independent_outward_current__V + 23.0)) / (1.0 - exp((-0.040000000000000001) * (var_time_independent_outward_current__V + 23.0))))); // uA_per_mm2
            const double var_membrane__i_K1 = var_time_independent_outward_current__i_K1; // uA_per_mm2
            const double var_chaste_interface__stimulus_protocol__Istim = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            const double var_membrane__Istim_converter = var_chaste_interface__stimulus_protocol__Istim; // uA_per_cm2
            const double var_membrane__Istim = 0.01 * var_membrane__Istim_converter; // uA_per_mm2
            const double var_membrane__d_V_d_environment__time = (var_membrane__Istim - (var_membrane__i_Na + var_membrane__i_s + var_membrane__i_x1 + var_membrane__i_K1)) / var_membrane__C; // 'millivolt per millisecond'
            const double var_chaste_interface__membrane__d_V_d_environment__time = var_membrane__d_V_d_environment__time; // ___units_1
            d_dt_chaste_interface__membrane__V = var_chaste_interface__membrane__d_V_d_environment__time; // 'millivolt per millisecond'
        }
        
        NV_Ith_S(rDY, 0) = d_dt_chaste_interface__membrane__V;
        NV_Ith_S(rDY, 1) = d_dt_chaste_interface__slow_inward_current__Cai;
        NV_Ith_S(rDY, 2) = d_dt_chaste_interface__sodium_current_m_gate__m;
        NV_Ith_S(rDY, 3) = d_dt_chaste_interface__sodium_current_h_gate__h;
        NV_Ith_S(rDY, 4) = d_dt_chaste_interface__sodium_current_j_gate__j;
        NV_Ith_S(rDY, 5) = d_dt_chaste_interface__slow_inward_current_d_gate__d;
        NV_Ith_S(rDY, 6) = d_dt_chaste_interface__slow_inward_current_f_gate__f;
        NV_Ith_S(rDY, 7) = d_dt_chaste_interface__time_dependent_outward_current_x1_gate__x1;
    }
    
    void Dynamicbeeler_reuter_model_1977FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -84.624
        double var_chaste_interface__slow_inward_current__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 1e-4
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.011
        double var_chaste_interface__sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988
        double var_chaste_interface__sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.975
        double var_chaste_interface__slow_inward_current_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.003
        double var_chaste_interface__slow_inward_current_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.994
        double var_chaste_interface__time_dependent_outward_current_x1_gate__x1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0001
        
        const double var_chaste_interface__environment__fake_dt = 1.0; // ms
        const double var_membrane__V = var_chaste_interface__membrane__V; // mV
        const double var_membrane__C = 0.01; // uF_per_mm2
        const double var_sodium_current__E_Na = 50.0; // mV
        const double var_sodium_current__m = var_chaste_interface__sodium_current_m_gate__m; // dimensionless
        const double var_sodium_current__j = var_chaste_interface__sodium_current_j_gate__j; // dimensionless
        const double var_sodium_current__h = var_chaste_interface__sodium_current_h_gate__h; // dimensionless
        const double var_sodium_current__g_Nac = 3.0000000000000001e-05; // mS_per_mm2
        const double var_sodium_current__g_Na = 0.040000000000000001; // mS_per_mm2
        const double var_slow_inward_current__d = var_chaste_interface__slow_inward_current_d_gate__d; // dimensionless
        const double var_slow_inward_current__g_s = 0.00089999999999999998; // mS_per_mm2
        const double var_slow_inward_current__f = var_chaste_interface__slow_inward_current_f_gate__f; // dimensionless
        const double var_slow_inward_current__Cai = var_chaste_interface__slow_inward_current__Cai; // concentration_units
        const double var_time_dependent_outward_current__x1 = var_chaste_interface__time_dependent_outward_current_x1_gate__x1; // dimensionless
        const double var_sodium_current_m_gate__m = var_sodium_current__m; // dimensionless
        const double var_sodium_current_h_gate__h = var_sodium_current__h; // dimensionless
        const double var_sodium_current_j_gate__j = var_sodium_current__j; // dimensionless
        const double var_slow_inward_current_d_gate__d = var_slow_inward_current__d; // dimensionless
        const double var_slow_inward_current_f_gate__f = var_slow_inward_current__f; // dimensionless
        const double var_time_dependent_outward_current_x1_gate__x1 = var_time_dependent_outward_current__x1; // dimensionless
        const double var_t1 = pow(var_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t3 = (var_sodium_current__g_Na * var_t1) * var_sodium_current_m_gate__m; // dimensionless
        const double var_t6 = var_slow_inward_current__g_s * var_slow_inward_current_d_gate__d; // dimensionless
        const double var_t7 = var_t6 * var_slow_inward_current_f_gate__f; // dimensionless
        const double var_t8 = 0.040000000000000001 * var_membrane__V; // dimensionless
        const double var_t10 = exp(var_t8 + 3.0800000000000001); // dimensionless
        const double var_t13 = exp(var_t8 + 1.3999999999999999); // dimensionless
        const double var_t14 = 1.0 / var_t13; // dimensionless
        const double var_t17 = var_t10 - 1.0; // dimensionless
        const double var_t22 = exp(var_t8 + 3.3999999999999999); // dimensionless
        const double var_t25 = exp((0.080000000000000002 * var_membrane__V) + 4.2400000000000002); // dimensionless
        const double var_t27 = exp(var_t8 + 2.1200000000000001); // dimensionless
        const double var_t28 = var_t25 + var_t27; // dimensionless
        const double var_t33 = pow(var_t28, 2.0); // dimensionless
        const double var_t42 = exp((-var_t8) - 0.92000000000000004); // dimensionless
        const double var_t43 = 1.0 - var_t42; // dimensionless
        const double var_t47 = pow(var_t43, 2.0); // dimensionless
        const double var_t53 = 1.0 / var_membrane__C; // dimensionless
        const double var_t57 = var_membrane__V - var_sodium_current__E_Na; // dimensionless
        const double var_t59 = (var_sodium_current_j_gate__j * var_t57) * var_t53; // dimensionless
        const double var_t67 = var_slow_inward_current_f_gate__f / var_slow_inward_current__Cai; // dimensionless
        const double var_t71 = var_slow_inward_current__g_s * var_slow_inward_current_f_gate__f; // dimensionless
        const double var_t73 = log(0.001 * var_slow_inward_current__Cai); // dimensionless
        const double var_t75 = (var_membrane__V + 82.299999999999997) + (13.028700000000001 * var_t73); // dimensionless
        const double var_t76 = var_t75 * var_t53; // dimensionless
        const double var_t82 = 0.10000000000000001 * var_membrane__V; // dimensionless
        const double var_t84 = exp((-var_t82) - 4.7000000000000002); // dimensionless
        const double var_t85 = var_t84 - 1.0; // dimensionless
        const double var_t86 = 1.0 / var_t85; // dimensionless
        const double var_t87 = 1.0 - var_sodium_current_m_gate__m; // dimensionless
        const double var_t89 = var_membrane__V + 47.0; // dimensionless
        const double var_t90 = pow(var_t85, 2.0); // dimensionless
        const double var_t98 = exp(((-0.056000000000000001) * var_membrane__V) - 4.032); // dimensionless
        const double var_t105 = 0.25 * var_membrane__V; // dimensionless
        const double var_t107 = exp((-var_t105) - 19.25); // dimensionless
        const double var_t113 = exp(((-0.082000000000000003) * var_membrane__V) - 1.845); // dimensionless
        const double var_t114 = var_t113 + 1.0; // dimensionless
        const double var_t115 = pow(var_t114, 2.0); // dimensionless
        const double var_t126 = exp((-var_t105) - 19.5); // dimensionless
        const double var_t129 = exp(((-0.20000000000000001) * var_membrane__V) - 15.6); // dimensionless
        const double var_t130 = var_t129 + 1.0; // dimensionless
        const double var_t132 = var_t126 / var_t130; // dimensionless
        const double var_t133 = 1.0 - var_sodium_current_j_gate__j; // dimensionless
        const double var_t136 = pow(var_t130, 2.0); // dimensionless
        const double var_t143 = exp((-var_t82) - 3.2000000000000002); // dimensionless
        const double var_t144 = var_t143 + 1.0; // dimensionless
        const double var_t145 = pow(var_t144, 2.0); // dimensionless
        const double var_t165 = exp((((-1.0) / 100.0) * var_membrane__V) + (1.0 / 20.0)); // dimensionless
        const double var_t168 = exp(((-0.071994240459999997) * var_membrane__V) + 0.35997120230000001); // dimensionless
        const double var_t169 = 1.0 + var_t168; // dimensionless
        const double var_t171 = var_t165 / var_t169; // dimensionless
        const double var_t172 = 1.0 - var_slow_inward_current_d_gate__d; // dimensionless
        const double var_t175 = pow(var_t169, 2.0); // dimensionless
        const double var_t183 = exp((((-1.0) / 59.0) * var_membrane__V) - (44.0 / 59.0)); // dimensionless
        const double var_t186 = exp(((1.0 / 20.0) * var_membrane__V) + (11.0 / 5.0)); // dimensionless
        const double var_t187 = 1.0 + var_t186; // dimensionless
        const double var_t189 = var_t183 / var_t187; // dimensionless
        const double var_t192 = pow(var_t187, 2.0); // dimensionless
        const double var_t204 = exp((((-1.0) / 125.0) * var_membrane__V) - (28.0 / 125.0)); // dimensionless
        const double var_t207 = exp((0.1499250375 * var_membrane__V) + 4.1979010499999996); // dimensionless
        const double var_t208 = 1.0 + var_t207; // dimensionless
        const double var_t210 = var_t204 / var_t208; // dimensionless
        const double var_t211 = 1.0 - var_slow_inward_current_f_gate__f; // dimensionless
        const double var_t214 = pow(var_t208, 2.0); // dimensionless
        const double var_t222 = exp((((-1.0) / 50.0) * var_membrane__V) - (3.0 / 5.0)); // dimensionless
        const double var_t225 = exp((((-1.0) / 5.0) * var_membrane__V) - 6.0); // dimensionless
        const double var_t226 = 1.0 + var_t225; // dimensionless
        const double var_t228 = var_t222 / var_t226; // dimensionless
        const double var_t231 = pow(var_t226, 2.0); // dimensionless
        const double var_t243 = exp((0.082644628100000006 * var_membrane__V) + 4.1322314049999997); // dimensionless
        const double var_t246 = exp((0.057142857140000003 * var_membrane__V) + 2.8571428569999999); // dimensionless
        const double var_t247 = 1.0 + var_t246; // dimensionless
        const double var_t249 = var_t243 / var_t247; // dimensionless
        const double var_t250 = 1.0 - var_time_dependent_outward_current_x1_gate__x1; // dimensionless
        const double var_t253 = pow(var_t247, 2.0); // dimensionless
        const double var_t261 = exp(((-0.059988002399999997) * var_membrane__V) - 1.1997600479999999); // dimensionless
        const double var_t264 = exp((((-1.0) / 25.0) * var_membrane__V) - (4.0 / 5.0)); // dimensionless
        const double var_t265 = 1.0 + var_t264; // dimensionless
        const double var_t267 = var_t261 / var_t265; // dimensionless
        const double var_t270 = pow(var_t265, 2.0); // dimensionless
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((((((((((-var_t3) * var_sodium_current_h_gate__h) * var_sodium_current_j_gate__j) - var_sodium_current__g_Nac) - var_t7) - (((0.00032000000000000003 * var_time_dependent_outward_current_x1_gate__x1) * var_t10) * var_t14)) + (((0.00032000000000000003 * var_time_dependent_outward_current_x1_gate__x1) * var_t17) * var_t14)) - ((0.00055999999999999995 * var_t22) / var_t28)) + (((0.014 * (var_t22 - 1.0)) / var_t33) * ((0.080000000000000002 * var_t25) + (0.040000000000000001 * var_t27)))) - (0.00069999999999999999 / var_t43)) + (((2.8e-05 * (var_membrane__V + 23.0)) / var_t47) * var_t42)) * var_t53));
        IJth(rJacobian, 1, 0) = var_chaste_interface__environment__fake_dt * ((-0.01) * var_t7);
        IJth(rJacobian, 2, 0) = var_chaste_interface__environment__fake_dt * ((((-var_t86) * var_t87) - ((((0.10000000000000001 * var_t89) / var_t90) * var_t87) * var_t84)) + ((2.2400000000000002 * var_t98) * var_sodium_current_m_gate__m));
        IJth(rJacobian, 3, 0) = var_chaste_interface__environment__fake_dt * ((((-0.0315) * var_t107) * (1.0 - var_sodium_current_h_gate__h)) - (((0.1394 / var_t115) * var_sodium_current_h_gate__h) * var_t113));
        IJth(rJacobian, 4, 0) = var_chaste_interface__environment__fake_dt * (((((-0.01375) * var_t132) * var_t133) + ((((0.010999999999999999 * var_t126) / var_t136) * var_t133) * var_t129)) - (((0.029999999999999999 / var_t145) * var_sodium_current_j_gate__j) * var_t143));
        IJth(rJacobian, 5, 0) = var_chaste_interface__environment__fake_dt * ((((((-0.00095) * var_t171) * var_t172) + ((((0.0068394528440000003 * var_t165) / var_t175) * var_t172) * var_t168)) + ((0.0011864406780000001 * var_t189) * var_slow_inward_current_d_gate__d)) + ((((0.0035000000000000001 * var_t183) / var_t192) * var_slow_inward_current_d_gate__d) * var_t186));
        IJth(rJacobian, 6, 0) = var_chaste_interface__environment__fake_dt * ((((((-9.6000000000000002e-05) * var_t210) * var_t211) - ((((0.00179910045 * var_t204) / var_t214) * var_t211) * var_t207)) + ((0.00012999999999999999 * var_t228) * var_slow_inward_current_f_gate__f)) - ((((0.0012999999999999999 * var_t222) / var_t231) * var_slow_inward_current_f_gate__f) * var_t225));
        IJth(rJacobian, 7, 0) = var_chaste_interface__environment__fake_dt * (((((4.1322314050000003e-05 * var_t249) * var_t250) - ((((2.8571428569999999e-05 * var_t243) / var_t253) * var_t250) * var_t246)) + ((7.7984403120000004e-05 * var_t267) * var_time_dependent_outward_current_x1_gate__x1)) - ((((5.1999999999999997e-05 * var_t261) / var_t270) * var_time_dependent_outward_current_x1_gate__x1) * var_t264));
        IJth(rJacobian, 0, 1) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-13.028700000000001) * var_t6) * var_t67) * var_t53));
        IJth(rJacobian, 1, 1) = var_chaste_interface__environment__fake_dt * ((((-0.13028699999999999) * var_t6) * var_t67) - 0.070000000000000007);
        IJth(rJacobian, 0, 2) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : (((((-3.0) * var_sodium_current__g_Na) * var_t1) * var_sodium_current_h_gate__h) * var_t59));
        IJth(rJacobian, 2, 2) = var_chaste_interface__environment__fake_dt * ((var_t89 * var_t86) - (40.0 * var_t98));
        IJth(rJacobian, 0, 3) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t3) * var_t59));
        IJth(rJacobian, 3, 3) = var_chaste_interface__environment__fake_dt * (((-0.126) * var_t107) - (1.7 / var_t114));
        IJth(rJacobian, 0, 4) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-var_t3) * var_sodium_current_h_gate__h) * var_t57) * var_t53));
        IJth(rJacobian, 4, 4) = var_chaste_interface__environment__fake_dt * (((-0.055) * var_t132) - (0.29999999999999999 / var_t144));
        IJth(rJacobian, 0, 5) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t71) * var_t76));
        IJth(rJacobian, 1, 5) = var_chaste_interface__environment__fake_dt * (((-0.01) * var_t71) * var_t75);
        IJth(rJacobian, 5, 5) = var_chaste_interface__environment__fake_dt * (((-0.095000000000000001) * var_t171) - (0.070000000000000007 * var_t189));
        IJth(rJacobian, 0, 6) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((-var_t6) * var_t76));
        IJth(rJacobian, 1, 6) = var_chaste_interface__environment__fake_dt * (((-0.01) * var_t6) * var_t75);
        IJth(rJacobian, 6, 6) = var_chaste_interface__environment__fake_dt * (((-0.012) * var_t210) - (0.0064999999999999997 * var_t228));
        IJth(rJacobian, 0, 7) = var_chaste_interface__environment__fake_dt * (mSetVoltageDerivativeToZero ? 0.0 : ((((-0.0080000000000000002) * var_t17) * var_t14) * var_t53));
        IJth(rJacobian, 7, 7) = var_chaste_interface__environment__fake_dt * (((-0.00050000000000000001) * var_t249) - (0.0012999999999999999 * var_t267));
    }
    
template<>
void OdeSystemInformation<Dynamicbeeler_reuter_model_1977FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "beeler_reuter_model_1977";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-84.624);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1e-4);

    // rY[2]:
    this->mVariableNames.push_back("sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.011);

    // rY[3]:
    this->mVariableNames.push_back("sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.988);

    // rY[4]:
    this->mVariableNames.push_back("sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.975);

    // rY[5]:
    this->mVariableNames.push_back("slow_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003);

    // rY[6]:
    this->mVariableNames.push_back("slow_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994);

    // rY[7]:
    this->mVariableNames.push_back("time_dependent_outward_current_x1_gate__x1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicbeeler_reuter_model_1977FromCellMLCvode)

#endif // CHASTE_CVODE
